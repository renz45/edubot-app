/// <reference types="node" />
import express from "express";
import Redis from "ioredis";
import type { WebhookEvent, Webhooks } from "@octokit/webhooks";
import type { Logger } from "pino";
import { Server } from "http";
import { Application } from "./application";
import { Context, WebhookPayloadWithRepository } from "./context";
import { ProbotOctokit } from "./octokit/probot-octokit";
import { DeprecatedLogger, ProbotWebhooks } from "./types";
export interface Options {
    privateKey?: string;
    githubToken?: string;
    id?: number;
    Octokit?: typeof ProbotOctokit;
    log?: Logger;
    redisConfig?: Redis.RedisOptions;
    secret?: string;
    webhookPath?: string;
    /**
     * @deprecated `cert` options is deprecated. Use `privateKey` instead
     */
    cert?: string;
    port?: number;
    host?: string;
    webhookProxy?: string;
}
export declare class Probot {
    static run(appFn: ApplicationFunction | string[]): Promise<Probot>;
    server: express.Application;
    webhooks: ProbotWebhooks;
    log: DeprecatedLogger;
    version: String;
    options: Options;
    throttleOptions: any;
    private httpServer?;
    private apps;
    private state;
    /**
     * @deprecated use probot.log instead
     */
    get logger(): DeprecatedLogger;
    constructor(options: Options);
    /**
     * @deprecated `probot.webhook` is deprecated. Use `probot.webhooks` instead
     */
    get webhook(): Webhooks;
    receive(event: WebhookEvent): Promise<void[]>;
    load(appFn: string | ApplicationFunction): Application;
    setup(appFns: Array<string | ApplicationFunction>): void;
    start(): Server;
    stop(): void;
}
export declare const createProbot: (options: Options) => Probot;
export declare type ApplicationFunction = (app: Application) => void;
export { Logger, Context, Application, ProbotOctokit };
/** NOTE: exported types might change at any point in time */
export { WebhookPayloadWithRepository };
