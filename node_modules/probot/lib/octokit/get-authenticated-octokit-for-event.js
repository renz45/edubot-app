"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthenticatedOctokitForEvent = void 0;
const auth_unauthenticated_1 = require("@octokit/auth-unauthenticated");
const get_authenticated_octokit_1 = require("./get-authenticated-octokit");
function getAuthenticatedOctokitForEvent(state, event) {
    if (state.githubToken)
        return get_authenticated_octokit_1.getAuthenticatedOctokit(state);
    if (isUnauthenticatedEvent(event)) {
        return new state.Octokit({
            authStrategy: auth_unauthenticated_1.createUnauthenticatedAuth,
            auth: {
                reason: "`context.github` is unauthenticated. See https://probot.github.io/docs/github-api/#unauthenticated-events",
            },
        });
    }
    return get_authenticated_octokit_1.getAuthenticatedOctokit(state, event.payload.installation.id);
}
exports.getAuthenticatedOctokitForEvent = getAuthenticatedOctokitForEvent;
// Some events can't get an authenticated client (#382):
function isUnauthenticatedEvent(event) {
    return (!event.payload.installation ||
        (event.name === "installation" && event.payload.action === "deleted"));
}
//# sourceMappingURL=get-authenticated-octokit-for-event.js.map