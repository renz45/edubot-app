import express from "express";
import Redis from "ioredis";
import LRUCache from "lru-cache";
import type { Webhooks } from "@octokit/webhooks";
import type { Logger } from "pino";
import { ApplicationFunction } from ".";
import { Context } from "./context";
import { ProbotOctokit } from "./octokit/probot-octokit";
import { DeprecatedLogger, ProbotWebhooks } from "./types";
export interface Options {
    privateKey?: string;
    githubToken?: string;
    id?: number;
    Octokit?: typeof ProbotOctokit;
    log?: Logger;
    redisConfig?: Redis.RedisOptions;
    secret?: string;
    webhookPath?: string;
    cache?: LRUCache<number, string>;
    octokit?: InstanceType<typeof ProbotOctokit>;
    throttleOptions?: any;
    webhooks?: Webhooks;
}
export declare type OnCallback<T> = (context: Context<T>) => Promise<void>;
/**
 * The `app` parameter available to `ApplicationFunction`s
 *
 * @property {logger} log - A logger
 */
export declare class Application {
    router: express.Router;
    log: DeprecatedLogger;
    on: ProbotWebhooks["on"];
    receive: ProbotWebhooks["receive"];
    private webhooks;
    private state;
    constructor(options: Options);
    /**
     * Loads an ApplicationFunction into the current Application
     * @param appFn - Probot application function to load
     */
    load(appFn: ApplicationFunction | ApplicationFunction[]): Application;
    /**
     * Get an {@link http://expressjs.com|express} router that can be used to
     * expose HTTP endpoints
     *
     * ```
     * module.exports = app => {
     *   // Get an express router to expose new HTTP endpoints
     *   const route = app.route('/my-app');
     *
     *   // Use any middleware
     *   route.use(require('express').static(__dirname + '/public'));
     *
     *   // Add a new route
     *   route.get('/hello-world', (req, res) => {
     *     res.end('Hello World');
     *   });
     * };
     * ```
     *
     * @param path - the prefix for the routes
     * @returns an [express.Router](http://expressjs.com/en/4x/api.html#router)
     */
    route(path?: string): express.Router;
    /**
     * Authenticate and get a GitHub client that can be used to make API calls.
     *
     * You'll probably want to use `context.github` instead.
     *
     * **Note**: `app.auth` is asynchronous, so it needs to be prefixed with a
     * [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)
     * to wait for the magic to happen.
     *
     * ```js
     *  module.exports = (app) => {
     *    app.on('issues.opened', async context => {
     *      const github = await app.auth();
     *    });
     *  };
     * ```
     *
     * @param id - ID of the installation, which can be extracted from
     * `context.payload.installation.id`. If called without this parameter, the
     * client wil authenticate [as the app](https://developer.github.com/apps/building-integrations/setting-up-and-registering-github-apps/about-authentication-options-for-github-apps/#authenticating-as-a-github-app)
     * instead of as a specific installation, which means it can only be used for
     * [app APIs](https://developer.github.com/v3/apps/).
     *
     * @returns An authenticated GitHub API client
     */
    auth(installationId?: number, log?: Logger): Promise<InstanceType<typeof ProbotOctokit>>;
}
