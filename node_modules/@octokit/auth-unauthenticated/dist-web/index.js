import { RequestError } from '@octokit/request-error';

async function auth(reason) {
    return {
        type: "unauthenticated",
        reason,
    };
}

function isRateLimitError(error) {
    if (error.status !== 403) {
        return false;
    }
    /* istanbul ignore if */
    if (!error.headers) {
        return false;
    }
    return error.headers["x-ratelimit-remaining"] === "0";
}

const REGEX_ABUSE_LIMIT_MESSAGE = /\babuse\b/i;
function isAbuseLimitError(error) {
    if (error.status !== 403) {
        return false;
    }
    return REGEX_ABUSE_LIMIT_MESSAGE.test(error.message);
}

const MUTATING_METHODS = ["DELETE", "PATCH", "POST", "PUT"];
async function hook(reason, request, route, parameters) {
    const endpoint = request.endpoint.merge(route, parameters);
    if (MUTATING_METHODS.includes(endpoint.method)) {
        throw new RequestError(`"${endpoint.method} ${endpoint.url}" is not permitted due to lack authentication. Reason: ${reason}`, 403, {
            request: request.endpoint.parse(endpoint),
        });
    }
    return request(endpoint).catch((error) => {
        if (error.status === 404) {
            error.message = `Not found. May be due to lack of authentication. Reason: ${reason}`;
        }
        if (isRateLimitError(error)) {
            error.message = `API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${reason}`;
        }
        if (isAbuseLimitError(error)) {
            error.message = `You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${reason}`;
        }
        throw error;
    });
}

const createUnauthenticatedAuth = function createUnauthenticatedAuth(options) {
    if (!options || !options.reason) {
        throw new Error("[@octokit/auth-unauthenticated] No reason passed to createUnauthenticatedAuth");
    }
    return Object.assign(auth.bind(null, options.reason), {
        hook: hook.bind(null, options.reason),
    });
};

export { createUnauthenticatedAuth };
//# sourceMappingURL=index.js.map
